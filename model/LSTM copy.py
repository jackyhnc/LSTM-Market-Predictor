{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 104,
      "metadata": {
        "id": "bN7DOD6kZtWA"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import LSTM, Dense, Dropout\n",
        "#from google.colab import drive\n",
        "import pandas as pd\n",
        "import yfinance"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 105,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t1DBF-iJZ0lB",
        "outputId": "aa7aafd1-b6b3-4189-abb1-d0684cdf91c9"
      },
      "outputs": [],
      "source": [
        "#drive.mount(\"/content/drive\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 106,
      "metadata": {
        "id": "i89CBrhPaK5O"
      },
      "outputs": [],
      "source": [
        "file_path_tda = '../feature_extraction/tda_features.csv' #'/content/drive/My Drive/LSTM/tda_features.csv'\n",
        "file_path_finance = '../sp500_data.csv' #'/content/drive/My Drive/LSTM/sp500_data.csv'\n",
        "file_path_ticker = '../sp500.csv' #'/content/drive/My Drive/LSTM/sp500.csv'\n",
        "\n",
        "df_tda = pd.read_csv(file_path_tda)\n",
        "df_finance = pd.read_csv(file_path_finance, header=[0,1])\n",
        "df_ticker = pd.read_csv(file_path_ticker)\n",
        "df_finance=df_finance.drop(0)\n",
        "df_finance=df_finance.rename(columns={\"Price\":\"Date\"})\n",
        "#df_finance = df_finance.set_index(\"Date\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 107,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th>Ticker</th>\n",
              "      <th colspan=\"5\" halign=\"left\">NWS</th>\n",
              "      <th colspan=\"4\" halign=\"left\">TMUS</th>\n",
              "      <th>...</th>\n",
              "      <th colspan=\"5\" halign=\"left\">DHR</th>\n",
              "      <th colspan=\"5\" halign=\"left\">WMT</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Volume</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>...</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Volume</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2018-01-02</td>\n",
              "      <td>15.250455</td>\n",
              "      <td>15.433644</td>\n",
              "      <td>15.204658</td>\n",
              "      <td>15.387846</td>\n",
              "      <td>463900.0</td>\n",
              "      <td>62.040010</td>\n",
              "      <td>62.641958</td>\n",
              "      <td>61.690488</td>\n",
              "      <td>62.175934</td>\n",
              "      <td>...</td>\n",
              "      <td>79.695788</td>\n",
              "      <td>79.960923</td>\n",
              "      <td>78.840496</td>\n",
              "      <td>79.062874</td>\n",
              "      <td>4087646.0</td>\n",
              "      <td>29.182010</td>\n",
              "      <td>29.326011</td>\n",
              "      <td>28.952788</td>\n",
              "      <td>28.973360</td>\n",
              "      <td>30451500.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>15.387846</td>\n",
              "      <td>15.479441</td>\n",
              "      <td>15.342050</td>\n",
              "      <td>15.479441</td>\n",
              "      <td>402500.0</td>\n",
              "      <td>62.030302</td>\n",
              "      <td>62.263314</td>\n",
              "      <td>61.408932</td>\n",
              "      <td>61.758453</td>\n",
              "      <td>...</td>\n",
              "      <td>78.891805</td>\n",
              "      <td>80.320140</td>\n",
              "      <td>78.874699</td>\n",
              "      <td>80.114868</td>\n",
              "      <td>2791236.0</td>\n",
              "      <td>29.049770</td>\n",
              "      <td>29.387727</td>\n",
              "      <td>29.026258</td>\n",
              "      <td>29.226097</td>\n",
              "      <td>26710800.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2018-01-04</td>\n",
              "      <td>15.479440</td>\n",
              "      <td>15.644310</td>\n",
              "      <td>15.387845</td>\n",
              "      <td>15.506919</td>\n",
              "      <td>877800.0</td>\n",
              "      <td>62.030304</td>\n",
              "      <td>62.137102</td>\n",
              "      <td>61.049704</td>\n",
              "      <td>61.166210</td>\n",
              "      <td>...</td>\n",
              "      <td>80.499718</td>\n",
              "      <td>81.175396</td>\n",
              "      <td>80.414195</td>\n",
              "      <td>80.499718</td>\n",
              "      <td>2397226.0</td>\n",
              "      <td>29.252541</td>\n",
              "      <td>29.323069</td>\n",
              "      <td>29.067399</td>\n",
              "      <td>29.252541</td>\n",
              "      <td>20491200.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2018-01-05</td>\n",
              "      <td>15.754226</td>\n",
              "      <td>15.937413</td>\n",
              "      <td>15.479442</td>\n",
              "      <td>15.754226</td>\n",
              "      <td>473100.0</td>\n",
              "      <td>61.690492</td>\n",
              "      <td>62.923521</td>\n",
              "      <td>61.282715</td>\n",
              "      <td>62.719635</td>\n",
              "      <td>...</td>\n",
              "      <td>80.833319</td>\n",
              "      <td>81.243856</td>\n",
              "      <td>80.687919</td>\n",
              "      <td>81.004379</td>\n",
              "      <td>2121430.0</td>\n",
              "      <td>29.281930</td>\n",
              "      <td>29.499398</td>\n",
              "      <td>29.273115</td>\n",
              "      <td>29.425930</td>\n",
              "      <td>21852000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2018-01-08</td>\n",
              "      <td>15.708428</td>\n",
              "      <td>15.800022</td>\n",
              "      <td>15.571036</td>\n",
              "      <td>15.754226</td>\n",
              "      <td>378900.0</td>\n",
              "      <td>62.583715</td>\n",
              "      <td>64.059476</td>\n",
              "      <td>62.438080</td>\n",
              "      <td>63.205086</td>\n",
              "      <td>...</td>\n",
              "      <td>80.927401</td>\n",
              "      <td>81.517550</td>\n",
              "      <td>80.645153</td>\n",
              "      <td>81.466232</td>\n",
              "      <td>2038522.0</td>\n",
              "      <td>29.461192</td>\n",
              "      <td>29.902008</td>\n",
              "      <td>29.449434</td>\n",
              "      <td>29.860863</td>\n",
              "      <td>26531700.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows Ã— 2520 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "       Ticker        NWS                                             \\\n",
              "         Date       Open       High        Low      Close    Volume   \n",
              "1  2018-01-02  15.250455  15.433644  15.204658  15.387846  463900.0   \n",
              "2  2018-01-03  15.387846  15.479441  15.342050  15.479441  402500.0   \n",
              "3  2018-01-04  15.479440  15.644310  15.387845  15.506919  877800.0   \n",
              "4  2018-01-05  15.754226  15.937413  15.479442  15.754226  473100.0   \n",
              "5  2018-01-08  15.708428  15.800022  15.571036  15.754226  378900.0   \n",
              "\n",
              "        TMUS                                   ...        DHR             \\\n",
              "        Open       High        Low      Close  ...       Open       High   \n",
              "1  62.040010  62.641958  61.690488  62.175934  ...  79.695788  79.960923   \n",
              "2  62.030302  62.263314  61.408932  61.758453  ...  78.891805  80.320140   \n",
              "3  62.030304  62.137102  61.049704  61.166210  ...  80.499718  81.175396   \n",
              "4  61.690492  62.923521  61.282715  62.719635  ...  80.833319  81.243856   \n",
              "5  62.583715  64.059476  62.438080  63.205086  ...  80.927401  81.517550   \n",
              "\n",
              "                                          WMT                        \\\n",
              "         Low      Close     Volume       Open       High        Low   \n",
              "1  78.840496  79.062874  4087646.0  29.182010  29.326011  28.952788   \n",
              "2  78.874699  80.114868  2791236.0  29.049770  29.387727  29.026258   \n",
              "3  80.414195  80.499718  2397226.0  29.252541  29.323069  29.067399   \n",
              "4  80.687919  81.004379  2121430.0  29.281930  29.499398  29.273115   \n",
              "5  80.645153  81.466232  2038522.0  29.461192  29.902008  29.449434   \n",
              "\n",
              "                          \n",
              "       Close      Volume  \n",
              "1  28.973360  30451500.0  \n",
              "2  29.226097  26710800.0  \n",
              "3  29.252541  20491200.0  \n",
              "4  29.425930  21852000.0  \n",
              "5  29.860863  26531700.0  \n",
              "\n",
              "[5 rows x 2520 columns]"
            ]
          },
          "execution_count": 107,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df_finance.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 108,
      "metadata": {
        "id": "JOc7sISBF9E3"
      },
      "outputs": [],
      "source": [
        "symbol_to_security = df_ticker.set_index(\"Symbol\")[\"Security\"].to_dict()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 109,
      "metadata": {
        "id": "UuL4cOCUaZzB"
      },
      "outputs": [],
      "source": [
        "betas_array = df_tda[[\"date\", 'beta0', 'beta1', 'beta2']].values\n",
        "feature_vectors = []\n",
        "\n",
        "for i in range(len(df_tda)):\n",
        "    row = df_tda.iloc[i]\n",
        "    feature_vector = np.array([\n",
        "        betas_array[i]      \n",
        "    ])\n",
        "\n",
        "    feature_vectors.append(feature_vector)\n",
        "\n",
        "feature_vectors = np.array(feature_vectors)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 110,
      "metadata": {
        "id": "QzKogH4TMYid"
      },
      "outputs": [],
      "source": [
        "sym=df_ticker[\"Symbol\"].tolist()\n",
        "tickers = np.array(sym)\n",
        "\n",
        "length = []\n",
        "for i in range(len(tickers)):\n",
        "  length.append(len(symbol_to_security[tickers[i]]))\n",
        "length=np.array(length)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 111,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 547
        },
        "id": "Wx5pQTNMbClK",
        "outputId": "8db06f22-8191-4024-c448-4d5cb4bc22b5"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/var/folders/c5/nwrhnbhs5ks1ssf190f4b49r0000gn/T/ipykernel_38280/3080447344.py:26: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_finance[\"Ticker\"][date] = pd.to_datetime(df_finance[\"Ticker\"][date])\n"
          ]
        },
        {
          "ename": "KeyError",
          "evalue": "np.str_('AOS')",
          "output_type": "error",
          "traceback": [
            "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
            "\u001b[31mKeyError\u001b[39m                                  Traceback (most recent call last)",
            "\u001b[36mFile \u001b[39m\u001b[32m~/projects/LSTM/.venv/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812\u001b[39m, in \u001b[36mIndex.get_loc\u001b[39m\u001b[34m(self, key)\u001b[39m\n\u001b[32m   3811\u001b[39m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m-> \u001b[39m\u001b[32m3812\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_engine\u001b[49m\u001b[43m.\u001b[49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcasted_key\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   3813\u001b[39m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n",
            "\u001b[36mFile \u001b[39m\u001b[32mpandas/_libs/index.pyx:167\u001b[39m, in \u001b[36mpandas._libs.index.IndexEngine.get_loc\u001b[39m\u001b[34m()\u001b[39m\n",
            "\u001b[36mFile \u001b[39m\u001b[32mpandas/_libs/index.pyx:196\u001b[39m, in \u001b[36mpandas._libs.index.IndexEngine.get_loc\u001b[39m\u001b[34m()\u001b[39m\n",
            "\u001b[36mFile \u001b[39m\u001b[32mpandas/_libs/hashtable_class_helper.pxi:7088\u001b[39m, in \u001b[36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[39m\u001b[34m()\u001b[39m\n",
            "\u001b[36mFile \u001b[39m\u001b[32mpandas/_libs/hashtable_class_helper.pxi:7096\u001b[39m, in \u001b[36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[39m\u001b[34m()\u001b[39m\n",
            "\u001b[31mKeyError\u001b[39m: np.str_('AOS')",
            "\nThe above exception was the direct cause of the following exception:\n",
            "\u001b[31mKeyError\u001b[39m                                  Traceback (most recent call last)",
            "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[111]\u001b[39m\u001b[32m, line 30\u001b[39m\n\u001b[32m     26\u001b[39m df_finance[\u001b[33m\"\u001b[39m\u001b[33mTicker\u001b[39m\u001b[33m\"\u001b[39m][date] = pd.to_datetime(df_finance[\u001b[33m\"\u001b[39m\u001b[33mTicker\u001b[39m\u001b[33m\"\u001b[39m][date])\n\u001b[32m     27\u001b[39m df_finance = df_finance[\u001b[33m\"\u001b[39m\u001b[33mTicker\u001b[39m\u001b[33m\"\u001b[39m].sort_values(date)\n\u001b[32m---> \u001b[39m\u001b[32m30\u001b[39m df_finance[ticker][\u001b[33m'\u001b[39m\u001b[33mRSI_14\u001b[39m\u001b[33m'\u001b[39m] = compute_rsi(\u001b[43mdf_finance\u001b[49m\u001b[43m[\u001b[49m\u001b[43mticker\u001b[49m\u001b[43m]\u001b[49m[\u001b[33m'\u001b[39m\u001b[33mClose\u001b[39m\u001b[33m'\u001b[39m], window=\u001b[32m14\u001b[39m)\n\u001b[32m     32\u001b[39m \u001b[38;5;66;03m# --- 2. Volatility (rolling std of log returns, 20-day) ---\u001b[39;00m\n\u001b[32m     33\u001b[39m df_finance[ticker][\u001b[33m'\u001b[39m\u001b[33mLogReturn\u001b[39m\u001b[33m'\u001b[39m] = np.log(df_finance[i][\u001b[33m'\u001b[39m\u001b[33mClose\u001b[39m\u001b[33m'\u001b[39m] / df_finance[ticker][\u001b[33m'\u001b[39m\u001b[33mClose\u001b[39m\u001b[33m'\u001b[39m].shift(\u001b[32m1\u001b[39m))\n",
            "\u001b[36mFile \u001b[39m\u001b[32m~/projects/LSTM/.venv/lib/python3.12/site-packages/pandas/core/frame.py:4113\u001b[39m, in \u001b[36mDataFrame.__getitem__\u001b[39m\u001b[34m(self, key)\u001b[39m\n\u001b[32m   4111\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m.columns.nlevels > \u001b[32m1\u001b[39m:\n\u001b[32m   4112\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m._getitem_multilevel(key)\n\u001b[32m-> \u001b[39m\u001b[32m4113\u001b[39m indexer = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mcolumns\u001b[49m\u001b[43m.\u001b[49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   4114\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m is_integer(indexer):\n\u001b[32m   4115\u001b[39m     indexer = [indexer]\n",
            "\u001b[36mFile \u001b[39m\u001b[32m~/projects/LSTM/.venv/lib/python3.12/site-packages/pandas/core/indexes/base.py:3819\u001b[39m, in \u001b[36mIndex.get_loc\u001b[39m\u001b[34m(self, key)\u001b[39m\n\u001b[32m   3814\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(casted_key, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;129;01mor\u001b[39;00m (\n\u001b[32m   3815\u001b[39m         \u001b[38;5;28misinstance\u001b[39m(casted_key, abc.Iterable)\n\u001b[32m   3816\u001b[39m         \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28many\u001b[39m(\u001b[38;5;28misinstance\u001b[39m(x, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;28;01mfor\u001b[39;00m x \u001b[38;5;129;01min\u001b[39;00m casted_key)\n\u001b[32m   3817\u001b[39m     ):\n\u001b[32m   3818\u001b[39m         \u001b[38;5;28;01mraise\u001b[39;00m InvalidIndexError(key)\n\u001b[32m-> \u001b[39m\u001b[32m3819\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01merr\u001b[39;00m\n\u001b[32m   3820\u001b[39m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[32m   3821\u001b[39m     \u001b[38;5;66;03m# If we have a listlike key, _check_indexing_error will raise\u001b[39;00m\n\u001b[32m   3822\u001b[39m     \u001b[38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise\u001b[39;00m\n\u001b[32m   3823\u001b[39m     \u001b[38;5;66;03m#  the TypeError.\u001b[39;00m\n\u001b[32m   3824\u001b[39m     \u001b[38;5;28mself\u001b[39m._check_indexing_error(key)\n",
            "\u001b[31mKeyError\u001b[39m: np.str_('AOS')"
          ]
        }
      ],
      "source": [
        "window = 30\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "date =\"Date\"\n",
        "\n",
        "def compute_rsi(series, window=14):\n",
        "    delta = series.diff()\n",
        "    gain = np.where(delta > 0, delta, 0)\n",
        "    loss = np.where(delta < 0, -delta, 0)\n",
        "\n",
        "    roll_up = pd.Series(gain).rolling(window=window).mean()\n",
        "    roll_down = pd.Series(loss).rolling(window=window).mean()\n",
        "\n",
        "    RS = roll_up / roll_down\n",
        "    RSI = 100.0 - (100.0 / (1.0 + RS))\n",
        "    return RSI\n",
        "\n",
        "\n",
        "for ticker in tickers:\n",
        "  if len(symbol_to_security[ticker]) < 5:\n",
        "    continue\n",
        "\n",
        "  # print(df_finance[ticker])\n",
        "  df_finance[\"Ticker\"][date] = pd.to_datetime(df_finance[\"Ticker\"][date])\n",
        "  df_finance = df_finance[\"Ticker\"].sort_values(date)\n",
        "\n",
        "\n",
        "  df_finance[ticker]['RSI_14'] = compute_rsi(df_finance[ticker]['Close'], window=14)\n",
        "\n",
        "  # --- 2. Volatility (rolling std of log returns, 20-day) ---\n",
        "  df_finance[ticker]['LogReturn'] = np.log(df_finance[i]['Close'] / df_finance[ticker]['Close'].shift(1))\n",
        "  df_finance[ticker]['Volatility_20'] = df_finance[i]['LogReturn'].rolling(window=20).std()\n",
        "\n",
        "  # --- 3. Liquidity (use On-Balance Volume + Volume Z-score) ---\n",
        "  # On-Balance Volume (OBV)\n",
        "  obv = [0]\n",
        "  for i in range(1, len(df_finance)):\n",
        "      if df_finance[ticker]['Close'].iloc[i] > df_finance[ticker]['Close'].iloc[i-1]:\n",
        "          obv.append(obv[-1] + df_finance[ticker]['Volume'].iloc[i])\n",
        "      elif df_finance[ticker]['Close'].iloc[i] < df_finance[ticker]['Close'].iloc[i-1]:\n",
        "          obv.append(obv[-1] - df_finance[ticker]['Volume'].iloc[i])\n",
        "      else:\n",
        "          obv.append(obv[-1])\n",
        "  df_finance[ticker]['OBV'] = obv\n",
        "\n",
        "  # Volume Z-score (20-day rolling)\n",
        "  df_finance[ticker]['Volume_Z'] = (df_finance[ticker]['Volume'] - df_finance[ticker]['Volume'].rolling(20).mean()) / df_finance['Volume'].rolling(20).std()\n",
        "\n",
        "  # --- Final Features Available ---\n",
        "  features = df_finance[ticker][[date, 'Close', 'RSI_14', 'Volatility_20', 'OBV', 'Volume_Z']]\n",
        "  print(features.tail(10))\n",
        "\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": ".venv",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.4"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
